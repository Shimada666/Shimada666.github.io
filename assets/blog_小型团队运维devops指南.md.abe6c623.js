import{_ as s,c as n,o as a,O as l}from"./chunks/framework.1deebb9d.js";const i=JSON.parse('{"title":"个人项目/小型团队运维devops指南","description":"","frontmatter":{"title":"个人项目/小型团队运维devops指南","tags":["运维","devops","kubernetes"]},"headers":[],"relativePath":"blog/小型团队运维devops指南.md","filePath":"blog/小型团队运维devops指南.md","lastUpdated":1685777941000}'),p={name:"blog/小型团队运维devops指南.md"},o=l(`<p>一直以来，我的个人项目部署都用的单机 + jenkins 的形式来实现 CICD，但使用时也渐渐发现不足。 如可移植性差、欠缺监控、部署麻烦等。且这一套过于传统，与现在先进的云原生技术有差距。 于是我决定对传统的服务方式来一个改造，跟上业界潮流，使用 kubernetes 来部署我的服务，以获得更好的体验。</p><h2 id="项目简介" tabindex="-1">项目简介 <a class="header-anchor" href="#项目简介" aria-label="Permalink to &quot;项目简介&quot;">​</a></h2><p>我的个人项目有前端项目、后端项目（java、python）等。在以往，前端项目是通过 jenkins 轮询代码仓库，触发流水线， 在机器上安装、构建，然后配置 nginx 来部署的。而后端项目通常用 docker 启动。做法一般是写 dockerfile 后， 到机器上去 build，然后再写个 docker-compose 文件，docker-compose down 后再 docker-compose up。 最后再在 nginx 上配个反向代理。这一套比较快，但也有些麻烦之处：</p><ul><li>前端项目使用的包管理器、node 版本不一定相同，容易出现无法安装、构建的情况。而且还要生成 nginx 的 conf 文件，麻烦。方法也比较原始。</li><li>后端项目多了不容易记住开的是哪个端口，以前开了哪些端口，要配反代也麻烦，而且镜像没地方存，只能存机器上。</li></ul><p>综上所述，我希望找到一个新的 devops 方式，来把提交代码 - 构建镜像 - 拉取镜像 - 部署这一套串起来，达到提交代码后自动更新服务的操作。</p><h2 id="kubernetes-集群搭建" tabindex="-1">kubernetes 集群搭建 <a class="header-anchor" href="#kubernetes-集群搭建" aria-label="Permalink to &quot;kubernetes 集群搭建&quot;">​</a></h2><p>搭建 kubernetes 集群有两个选择：rancher、kubesphere</p><p>在开始的时候，我使用的 rancher 搭建 k8s 集群。但是不知道哪里出了问题， rancher 死活装不上集群，节点一直无法加入集群，试了好几个版本都不行，属实是浪费我时间了，另外 rancher 的文档、讨论什么的都是英文的，看的头大，于是我就把目光投向了 kubesphere。</p><p>kubesphere 安装倒是很顺利，这里必须夸一下 kubesphere 的文档，写的非常详细，直接按文档上 all in one 的方式， 一次就搭建成功了。kubesphere 自带监控报警等功能，且具有可视化的图形界面，自带 ui，白屏化的操作模式， 让我摆脱了不熟 kubectl 命令的窘迫，用起来属实是非常顺手。毕竟脱离运维有点久了，业务不熟了。</p><p>就这样，我成功把 kubernetes 集群搭建起来了，还配上了个对开发友好的 ui 界面，附带一堆功能，开箱即用，很舒服</p><h2 id="新的-devops" tabindex="-1">新的 devops <a class="header-anchor" href="#新的-devops" aria-label="Permalink to &quot;新的 devops&quot;">​</a></h2><p>在之前，其实一直想把流程做正规点，把 jenkins + k8s 那一套用起来，苦于当时认为网上各种实践都比较麻烦，就一直没搞。 在后面逛 v 站的时候，了解到 k8s 单节点有 rancher、kubesphere 这样很方便的平台可以一键式搭建 k8s 集群，于是就决定重新试一下。</p><p>对于个人项目，我期望的是操作是：</p><ol><li>提交代码</li><li>检测到代码变动</li><li>构建镜像</li><li>推送镜像到镜像仓库</li><li>拉取镜像</li><li>进行部署</li><li>配置域名反代</li></ol><p>在原本我用的 jenkins 那一套，没有 5、6 的操作，这就导致难以多服务器部署。且配置反代也麻烦。</p><p>现在有了 kubesphere 这套方案，就可以很方便地将这些串到一起。下面讲一下每一步的细节</p><h3 id="_1-提交代码" tabindex="-1">1.提交代码 <a class="header-anchor" href="#_1-提交代码" aria-label="Permalink to &quot;1.提交代码&quot;">​</a></h3><p>提交代码，首先要有代码仓库。在这里只推荐 github。但是 github 也有一些问题，比如不挂梯子速度太慢、经常失败等。 所以为了解决这个问题，也可以用阿里云的 codeup，或者自建 gitlab 等方案，来保存我们的代码</p><h3 id="_2-检测代码变动" tabindex="-1">2.检测代码变动 <a class="header-anchor" href="#_2-检测代码变动" aria-label="Permalink to &quot;2.检测代码变动&quot;">​</a></h3><p>一般情况下，是可以配置 webhook 来触发流水线的。 但是，webhook 需要去 github 额外再配置一下，此外，那时候服务器刚好挂了怎么办？</p><p>所以为了解决这个问题，我还是配的流水线的定时扫描器，每一两分钟就扫描一下，发现不同了就触发流水线。</p><h3 id="_3-构建镜像" tabindex="-1">3.构建镜像 <a class="header-anchor" href="#_3-构建镜像" aria-label="Permalink to &quot;3.构建镜像&quot;">​</a></h3><p>这步也是在流水线里做。流水线在拉取代码后，进行 docker build 操作。 我们可以构建镜像，然后为镜像打个 tag。</p><h3 id="_4-推送镜像" tabindex="-1">4.推送镜像 <a class="header-anchor" href="#_4-推送镜像" aria-label="Permalink to &quot;4.推送镜像&quot;">​</a></h3><p>构建完镜像后，就可以推送镜像了。</p><p>但是，推送镜像到什么地方呢？有两个选择方案，一个是用公有云提供的镜像仓库，如腾讯云、阿里云的镜像仓库服务。 另一个就是自己自建 harbor 之类的镜像仓库。众所周知，自己搭建不仅麻烦，且 SLA 也无法保证，所以， 我直接选择了公有云提供的服务，毕竟，能上云的就上云，公有云提供的服务的稳定性不是个人自建所能比的。</p><p>在这一步，通过流水线里的命令，将镜像推送至腾讯云镜像仓库。</p><p>在这里还有个细节，我们一般希望保存每个构建的镜像，所以我们可以将此次构建出的镜像，再加个 latest 的 tag， 然后和原 tag 一起推送至镜像仓库。</p><h3 id="_5-拉取镜像" tabindex="-1">5.拉取镜像 <a class="header-anchor" href="#_5-拉取镜像" aria-label="Permalink to &quot;5.拉取镜像&quot;">​</a></h3><p>kubernetes 集群这时候会选择一台合适的服务器来部署服务。由于我们暂时只有一台机器，那么肯定就调度到这台机器上。 但是拉取镜像的行为还是要做的。我们一般会在服务里增加一个 kubernetes 配置文件，配置将拉取何镜像。 这里我们选择了使用变量的方式，使用之前的镜像名来拉取，所以我们配置文件中拉取镜像一项也要写变量名。这里要和 jenkinsfile 配合使用。 例如我就是这样的：</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># deployment.yml</span></span>
<span class="line"><span style="color:#F07178;">apiVersion</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apps/v1</span></span>
<span class="line"><span style="color:#F07178;">kind</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Deployment</span></span>
<span class="line"><span style="color:#F07178;">metadata</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;"># 部署名字</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pzblog</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">namespace</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">corgi-project</span></span>
<span class="line"><span style="color:#F07178;">spec</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">replicas</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;"># 用来查找关联的 Pod，所有标签都匹配才行</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">selector</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">matchLabels</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">app</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pzblog</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;"># 定义 Pod 相关数据</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">metadata</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">labels</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">app</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pzblog</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">spec</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">imagePullSecrets</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">txcloud-docker-registry</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># 提前在项目下配置访问腾讯云的账号密码</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;"># 定义容器，可以多个</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">containers</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pzblog</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 容器名字</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">$REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$GIT_COMMIT</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 配合 jenkins 使用的镜像</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">imagePullPolicy</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Always</span></span></code></pre></div><h3 id="_6-进行部署" tabindex="-1">6.进行部署 <a class="header-anchor" href="#_6-进行部署" aria-label="Permalink to &quot;6.进行部署&quot;">​</a></h3><p>在拉取完镜像之后，我们就要开始部署。一般情况下，云原生的部署方式是用 argo cd 这样的 cd 工具来完成部署， 但是个人项目不用搞这么花里胡哨，再加上 kubesphere 集成的持续部署功能还有待完善，于是我们还是使用最传统的 kubectl 来完成部署。</p><p>一般我希望在项目下有一个 deployments 文件夹，里面有 deployment、service、ingress 三个 yml 来部署服务。 deployment 刚刚已经贴过，是用来启动容器（工作负载）的，而 service 是用来给容器暴露网络的，但是一般暴露的网络， 只能在 kubernetes 集群内访问。而 ingress 则是用来暴露域名访问的。在 ingress 文件里我们会配置一个域名， 转发域名到指定的服务上，从而完成外网的访问。这里我们贴一下 service.yml、ingress.yml 的配置</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># service.yml</span></span>
<span class="line"><span style="color:#F07178;">apiVersion</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">v1</span></span>
<span class="line"><span style="color:#F07178;">kind</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Service</span></span>
<span class="line"><span style="color:#F07178;">metadata</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">namespace</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">corgi-project</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">labels</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">app</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pzblog-svc</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pzblog-svc</span></span>
<span class="line"><span style="color:#F07178;">spec</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">sessionAffinity</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">None</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">selector</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">app</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pzblog</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">ports</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">http-80</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">protocol</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">TCP</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">targetPort</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">80</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">port</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">80</span></span></code></pre></div><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># ingress.yml</span></span>
<span class="line"><span style="color:#F07178;">kind</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Ingress</span></span>
<span class="line"><span style="color:#F07178;">apiVersion</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">networking.k8s.io/v1</span></span>
<span class="line"><span style="color:#F07178;">metadata</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pzblog</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">namespace</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">corgi-project</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">annotations</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">kubesphere.io/creator</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">admin</span></span>
<span class="line"><span style="color:#F07178;">spec</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">host</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">shimada666.corgi.plus</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">http</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">paths</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">pathType</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ImplementationSpecific</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">backend</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#F07178;">service</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pzblog-svc</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F07178;">port</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#F07178;">number</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">80</span></span></code></pre></div><p>而对于部署环节，我们流水线的命令是</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">envsubst</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">deployments/deployment.yml</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">kubectl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apply</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-f</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-</span></span>
<span class="line"><span style="color:#FFCB6B;">envsubst</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">deployments/service.yml</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">kubectl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apply</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-f</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-</span></span>
<span class="line"><span style="color:#FFCB6B;">envsubst</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">deployments/ingress.yml</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">kubectl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apply</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-f</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-</span></span></code></pre></div><p>这会自动将我们 yml 文件的变量占位符替换成流水线中指定的变量，从而进行部署。</p><h3 id="_7-配置域名反代" tabindex="-1">7.配置域名反代 <a class="header-anchor" href="#_7-配置域名反代" aria-label="Permalink to &quot;7.配置域名反代&quot;">​</a></h3><p>在从前，我们还要手动开反代。而现在，在部署环节，我们已经配置了 ingress，来自动将对应域名转发到我们的服务上。</p><p>至此，一个服务部署就结束了，全程都是自动作业，以后开一个新项目，只需要为项目拷贝一份 jenkinsfile 与 kubernetes 部署文件，简单修改一下，再到 kubesphere 配置一下，即可完成整套自动化构建部署的操作。</p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>这一套部署方案目前已经在好几个人项目里用上了。非常舒适。理论上，云原生部署最好结合 argo cd 来做， 而现在 jenkins 一手包办了整个 CICD 流程。最好的这一套流程大概是：</p><ol><li>提交代码</li><li>jenkins 做 ci，完成镜像构建、推送</li><li>工具修改部署镜像等信息</li><li>argo cd 来做 cd，监测到 kubernetes 配置文件发生变化，自动拉取最新镜像部署。</li></ol><p>但是 kubesphere 集成的 argo cd 目前还不完善，加上个人项目没那么多讲究，所以就先这样跑着了。 集成 argo cd 的方式，还在继续探索中，希望未来能用上。</p><h2 id="附录" tabindex="-1">附录 <a class="header-anchor" href="#附录" aria-label="Permalink to &quot;附录&quot;">​</a></h2><h3 id="jenkinsfile" tabindex="-1">jenkinsfile <a class="header-anchor" href="#jenkinsfile" aria-label="Permalink to &quot;jenkinsfile&quot;">​</a></h3><div class="language-groovy"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pipeline {</span></span>
<span class="line"><span style="color:#A6ACCD;">  agent {</span></span>
<span class="line"><span style="color:#A6ACCD;">    node {</span></span>
<span class="line"><span style="color:#A6ACCD;">      label </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">base</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">  stages {</span></span>
<span class="line"><span style="color:#A6ACCD;">    stage</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">clone code</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">      agent none</span></span>
<span class="line"><span style="color:#A6ACCD;">      steps {</span></span>
<span class="line"><span style="color:#A6ACCD;">        container</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">base</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">          git</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">url</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">git@github.com:Shimada666/MyBlog.git</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">changelog</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">poll</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">credentialsId</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pz-github-ssh</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">branch</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">master</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">      }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    stage</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">build &amp; push</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">      steps {</span></span>
<span class="line"><span style="color:#A6ACCD;">        container</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">base</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">          sh </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">docker build -f Dockerfile -t $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$GIT_COMMIT .</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">          withCredentials</span><span style="color:#89DDFF;">([</span><span style="color:#A6ACCD;">usernamePassword</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">credentialsId</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">txcloud-docker-registry</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">passwordVariable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DOCKER_PASSWORD</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">usernameVariable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DOCKER_USERNAME</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">,)])</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">            sh </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">echo &quot;$DOCKER_PASSWORD&quot; | docker login $REGISTRY -u &quot;$DOCKER_USERNAME&quot; --password-stdin</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">            sh </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">docker push  $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$GIT_COMMIT</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">          }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">      }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    stage</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">push latest</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">      steps {</span></span>
<span class="line"><span style="color:#A6ACCD;">        container</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">base</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">          sh </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">docker tag  $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$GIT_COMMIT $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:latest </span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">          sh </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">docker push  $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:latest </span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">      }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    stage</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">deploy to production</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">      agent none</span></span>
<span class="line"><span style="color:#A6ACCD;">      steps {</span></span>
<span class="line"><span style="color:#A6ACCD;">        container</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">base</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">          withCredentials</span><span style="color:#89DDFF;">([</span><span style="color:#A6ACCD;">kubeconfigContent</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">credentialsId</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">kubeconfig</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">variable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">KUBECONFIG_CONFIG</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">,)])</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">            sh </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mkdir -p ~/.kube/</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">            sh </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">echo &quot;$KUBECONFIG_CONFIG&quot; &gt; ~/.kube/config</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">            sh </span><span style="color:#89DDFF;">&#39;&#39;&#39;</span><span style="color:#C3E88D;">envsubst &lt; deployments/deployment.yml | kubectl apply -f -</span></span>
<span class="line"><span style="color:#C3E88D;">envsubst &lt; deployments/service.yml | kubectl apply -f -</span></span>
<span class="line"><span style="color:#C3E88D;">envsubst &lt; deployments/ingress.yml | kubectl apply -f -</span><span style="color:#89DDFF;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">          }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">      }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">  environment {</span></span>
<span class="line"><span style="color:#A6ACCD;">    KUBECONFIG_CREDENTIAL_ID </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">kubeconfig</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    REGISTRY </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ccr.ccs.tencentyun.com</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    DOCKERHUB_NAMESPACE </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">corgi_project</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    APP_NAME </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pzblog</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">  parameters {</span></span>
<span class="line"><span style="color:#A6ACCD;">    string</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">TAG_NAME</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">defaultValue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">description</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div>`,49),e=[o];function c(t,r,D,y,C,F){return a(),n("div",null,e)}const d=s(p,[["render",c]]);export{i as __pageData,d as default};
