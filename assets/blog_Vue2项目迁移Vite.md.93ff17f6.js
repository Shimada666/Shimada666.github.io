import{_ as s,c as a,o as n,O as l}from"./chunks/framework.1deebb9d.js";const u=JSON.parse('{"title":"Vue2项目迁移Vite","description":"","frontmatter":{"title":"Vue2项目迁移Vite","tags":["前端","vue"]},"headers":[],"relativePath":"blog/Vue2项目迁移Vite.md","filePath":"blog/Vue2项目迁移Vite.md","lastUpdated":1685801417000}'),e={name:"blog/Vue2项目迁移Vite.md"},o=l(`<p>众所周知，大多数的 vue2 项目都是用 vue-cli 创建的，但是众所周知 vue-cli 创建的项目，vue-cli 是基于 webpack 的，冷启动以及热重载速度均远不及 vite。<br> 那么，这样的项目，在迁移 vite 中，会遇到什么问题？<br> 本博客将记录 vue2 + ts 的项目迁移至 vue 的一些经验，希望对大家有所帮助。</p><h2 id="为什么使用-vite-开发" tabindex="-1">为什么使用 Vite 开发？ <a class="header-anchor" href="#为什么使用-vite-开发" aria-label="Permalink to &quot;为什么使用 Vite 开发？&quot;">​</a></h2><p>vite 是新一代的前端开发与构建工具，区别于 webpack, 它的开发服务器基于 es modules 机制，提供给用户快到惊人的热更新功能。<br> 举个例子，一个使用 vue2 的 vue-cli 项目可能需要启动 30-60 秒，但如果迁移到 vite，那么启动甚至可至 1 秒内，这就是 vite 的优势了。</p><h2 id="迁移前的项目介绍" tabindex="-1">迁移前的项目介绍 <a class="header-anchor" href="#迁移前的项目介绍" aria-label="Permalink to &quot;迁移前的项目介绍&quot;">​</a></h2><p>这个项目是 2020 年开始开发的。项目使用 vue-cli4 创建，使用 vue2 + ts 为主要技术栈，前中期大量使用 <code>vue-class-component</code> 的方式的类组件来进行开发。 在 vue3 出现后，引入了 <code>@vue/composition-api</code> 与 <code>unplugin-vue2-script-setup</code> 进行开发。编写代码体验已经和写 vue3 很相似了，但是开发时的启动速度仍然是一大痛点。</p><h2 id="如何迁移" tabindex="-1">如何迁移？ <a class="header-anchor" href="#如何迁移" aria-label="Permalink to &quot;如何迁移？&quot;">​</a></h2><p>要知道如何迁移，就必须调研 vite 与 vue-cli 使用上有哪些区别。总结下来，主要有这几点</p><ol><li><code>public.html</code> 位置的不同，vue-cli 中是 <code>public/index.html</code>，而 vite 中直接是根目录下的 <code>index.html</code>。</li><li>配置文件的不同。vue-cli 使用的 <code>vue.config.js</code> 文件, vite 中使用的是 <code>vite.config.js</code>。且配置也有一定差异。比如全局 css 文件的引入方式。vue-cli 使用的是</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// vue.config.js</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">css</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">loaderOptions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">sass</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">prependData</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@import &quot;@/assets/style/share.scss&quot;;</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>而 vite 中使用的是</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// vite.config.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">css</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">preprocessorOptions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">scss</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">additionalData</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">source</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">fp</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">// All scss files ending with imports.scss</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">// will not re-import additionalData</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">fp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">endsWith</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.scss</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">source</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">// Use additionalData from legacy nuxt scss options</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">@import &quot;@/assets/style/share.scss&quot;; </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">}\`</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><ol start="3"><li>使用 vite 必须库原生支持 esm 的模式。通常可以通过升级库解决。</li><li>环境变量使用方式的不同。vue-cli 中是通过 <code>p<wbr>rocess.env.xxxx</code> 来使用环境变量，而 vite 中是通过 <code>i<wbr>mport.meta.env.xxxx</code> 来使用。这一点可用 <code>vite-plugin-env-compatible</code> 抹平差距。</li></ol><p>了解了以上四点。就可以开始迁移了。</p><h2 id="迁移实操" tabindex="-1">迁移实操 <a class="header-anchor" href="#迁移实操" aria-label="Permalink to &quot;迁移实操&quot;">​</a></h2><p>在生产项目迁移时，我们通常都希望能在使用上新功能的同时，也保留旧功能，如果发生故障可以随时切换旧功能完成修复。 因此，在引入 vite 的同时保留 vue-cli 的方式就是我们迁移的重点。生产环境，安全第一。 同时，引入 vite 并不意味着我们要使用 vite 的打包功能，我们仍然可以使用 vue-cli 的打包功能，保证生产环境的稳定与兼容性。</p><h3 id="无痛迁移" tabindex="-1">无痛迁移 <a class="header-anchor" href="#无痛迁移" aria-label="Permalink to &quot;无痛迁移&quot;">​</a></h3><p>首先要介绍一款插件。<a href="https://github.com/IndexXuan/vue-cli-plugin-vite" target="_blank" rel="noreferrer">vue-cli-plugin-vite</a> 这个插件可以方便我们无痛迁移 vue-cli 至 vite 并保留 vue-cli 的能力。 此插件复用了 vue.config.js，大部分配置都不需要修改。基本上可以做到开箱即用，无痛体验 vite 的启动速度。</p><h3 id="手工迁移" tabindex="-1">手工迁移 <a class="header-anchor" href="#手工迁移" aria-label="Permalink to &quot;手工迁移&quot;">​</a></h3><p>这也是我使用的迁移方式。因为我觉得复用原有代码的方式太过丑陋，同时迁移所需的配置项也没那么多。因此我们对于上文提到的 1-4 点说一下我们是怎么做的。</p><ol><li>index.html 的迁移非常简单，创建一份 <code>index.html</code> 到根目录即可</li><li>配置文件也好解决，创建一个 <code>vite.config.ts</code> 即可</li><li>库必须是 esm 这一点，我遇到了使用的 vue-echarts 不兼容的问题。查看 github，发现把版本升级到 &gt;6.0.0 即可解决。于是按照文档升级版本后迁移至 v6 版本解决。</li><li>环境变量的问题，我直接使用了 <code>vite-plugin-env-compatible</code> 库帮助我导入所有环境变量。作为插件配置在 <code>vite.config.ts</code> 即可。</li></ol><h2 id="迁移结果" tabindex="-1">迁移结果 <a class="header-anchor" href="#迁移结果" aria-label="Permalink to &quot;迁移结果&quot;">​</a></h2><p>迁移后，项目启动时间从 30-60 秒降至 1 秒，同时保留了原有的开发、打包方式，把风险降到了最低。至此，本文结束。</p>`,22),p=[o];function t(c,i,r,D,y,F){return n(),a("div",null,p)}const C=s(e,[["render",t]]);export{u as __pageData,C as default};
